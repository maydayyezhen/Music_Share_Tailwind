{
  "version": 3,
  "sources": ["../../fast-average-color/dist/index.esm.js"],
  "sourcesContent": ["/*! Fast Average Color | Â© 2025 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\r\nfunction toHex(num) {\r\n    var str = num.toString(16);\r\n    return str.length === 1 ? '0' + str : str;\r\n}\r\nfunction arrayToHex(arr) {\r\n    return '#' + arr.map(toHex).join('');\r\n}\r\nfunction isDark(color) {\r\n    // http://www.w3.org/TR/AERT#color-contrast\r\n    var result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\r\n    return result < 128;\r\n}\r\nfunction prepareIgnoredColor(color) {\r\n    if (!color) {\r\n        return [];\r\n    }\r\n    return isRGBArray(color) ? color : [color];\r\n}\r\nfunction isRGBArray(value) {\r\n    return Array.isArray(value[0]);\r\n}\r\nfunction isIgnoredColor(data, index, ignoredColor) {\r\n    for (var i = 0; i < ignoredColor.length; i++) {\r\n        if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\r\n    switch (ignoredColor.length) {\r\n        case 3:\r\n            // [red, green, blue]\r\n            if (isIgnoredRGBColor(data, index, ignoredColor)) {\r\n                return true;\r\n            }\r\n            break;\r\n        case 4:\r\n            // [red, green, blue, alpha]\r\n            if (isIgnoredRGBAColor(data, index, ignoredColor)) {\r\n                return true;\r\n            }\r\n            break;\r\n        case 5:\r\n            // [red, green, blue, alpha, threshold]\r\n            if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\r\n                return true;\r\n            }\r\n            break;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\r\n    // Ignore if the pixel are transparent.\r\n    if (data[index + 3] !== 255) {\r\n        return true;\r\n    }\r\n    if (data[index] === ignoredColor[0] &&\r\n        data[index + 1] === ignoredColor[1] &&\r\n        data[index + 2] === ignoredColor[2]) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\r\n    if (data[index + 3] && ignoredColor[3]) {\r\n        return data[index] === ignoredColor[0] &&\r\n            data[index + 1] === ignoredColor[1] &&\r\n            data[index + 2] === ignoredColor[2] &&\r\n            data[index + 3] === ignoredColor[3];\r\n    }\r\n    // Ignore rgb components if the pixel are fully transparent.\r\n    return data[index + 3] === ignoredColor[3];\r\n}\r\nfunction inRange(colorComponent, ignoredColorComponent, value) {\r\n    return colorComponent >= (ignoredColorComponent - value) &&\r\n        colorComponent <= (ignoredColorComponent + value);\r\n}\r\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\r\n    var redIgnored = ignoredColor[0];\r\n    var greenIgnored = ignoredColor[1];\r\n    var blueIgnored = ignoredColor[2];\r\n    var alphaIgnored = ignoredColor[3];\r\n    var threshold = ignoredColor[4];\r\n    var alphaData = data[index + 3];\r\n    var alphaInRange = inRange(alphaData, alphaIgnored, threshold);\r\n    if (!alphaIgnored) {\r\n        return alphaInRange;\r\n    }\r\n    if (!alphaData && alphaInRange) {\r\n        return true;\r\n    }\r\n    if (inRange(data[index], redIgnored, threshold) &&\r\n        inRange(data[index + 1], greenIgnored, threshold) &&\r\n        inRange(data[index + 2], blueIgnored, threshold) &&\r\n        alphaInRange) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nvar DEFAULT_DOMINANT_DIVIDER = 24;\r\nfunction dominantAlgorithm(arr, len, options) {\r\n    var colorHash = {};\r\n    var divider = options.dominantDivider || DEFAULT_DOMINANT_DIVIDER;\r\n    var ignoredColor = options.ignoredColor;\r\n    var step = options.step;\r\n    var max = [0, 0, 0, 0, 0];\r\n    for (var i = 0; i < len; i += step) {\r\n        var red = arr[i];\r\n        var green = arr[i + 1];\r\n        var blue = arr[i + 2];\r\n        var alpha = arr[i + 3];\r\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\r\n            continue;\r\n        }\r\n        var key = Math.round(red / divider) + ',' +\r\n            Math.round(green / divider) + ',' +\r\n            Math.round(blue / divider);\r\n        if (colorHash[key]) {\r\n            colorHash[key] = [\r\n                colorHash[key][0] + red * alpha,\r\n                colorHash[key][1] + green * alpha,\r\n                colorHash[key][2] + blue * alpha,\r\n                colorHash[key][3] + alpha,\r\n                colorHash[key][4] + 1\r\n            ];\r\n        }\r\n        else {\r\n            colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\r\n        }\r\n        if (max[4] < colorHash[key][4]) {\r\n            max = colorHash[key];\r\n        }\r\n    }\r\n    var redTotal = max[0];\r\n    var greenTotal = max[1];\r\n    var blueTotal = max[2];\r\n    var alphaTotal = max[3];\r\n    var count = max[4];\r\n    return alphaTotal ? [\r\n        Math.round(redTotal / alphaTotal),\r\n        Math.round(greenTotal / alphaTotal),\r\n        Math.round(blueTotal / alphaTotal),\r\n        Math.round(alphaTotal / count)\r\n    ] : options.defaultColor;\r\n}\r\n\r\nfunction simpleAlgorithm(arr, len, options) {\r\n    var redTotal = 0;\r\n    var greenTotal = 0;\r\n    var blueTotal = 0;\r\n    var alphaTotal = 0;\r\n    var count = 0;\r\n    var ignoredColor = options.ignoredColor;\r\n    var step = options.step;\r\n    for (var i = 0; i < len; i += step) {\r\n        var alpha = arr[i + 3];\r\n        var red = arr[i] * alpha;\r\n        var green = arr[i + 1] * alpha;\r\n        var blue = arr[i + 2] * alpha;\r\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\r\n            continue;\r\n        }\r\n        redTotal += red;\r\n        greenTotal += green;\r\n        blueTotal += blue;\r\n        alphaTotal += alpha;\r\n        count++;\r\n    }\r\n    return alphaTotal ? [\r\n        Math.round(redTotal / alphaTotal),\r\n        Math.round(greenTotal / alphaTotal),\r\n        Math.round(blueTotal / alphaTotal),\r\n        Math.round(alphaTotal / count)\r\n    ] : options.defaultColor;\r\n}\r\n\r\nfunction sqrtAlgorithm(arr, len, options) {\r\n    var redTotal = 0;\r\n    var greenTotal = 0;\r\n    var blueTotal = 0;\r\n    var alphaTotal = 0;\r\n    var count = 0;\r\n    var ignoredColor = options.ignoredColor;\r\n    var step = options.step;\r\n    for (var i = 0; i < len; i += step) {\r\n        var red = arr[i];\r\n        var green = arr[i + 1];\r\n        var blue = arr[i + 2];\r\n        var alpha = arr[i + 3];\r\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\r\n            continue;\r\n        }\r\n        redTotal += red * red * alpha;\r\n        greenTotal += green * green * alpha;\r\n        blueTotal += blue * blue * alpha;\r\n        alphaTotal += alpha;\r\n        count++;\r\n    }\r\n    return alphaTotal ? [\r\n        Math.round(Math.sqrt(redTotal / alphaTotal)),\r\n        Math.round(Math.sqrt(greenTotal / alphaTotal)),\r\n        Math.round(Math.sqrt(blueTotal / alphaTotal)),\r\n        Math.round(alphaTotal / count)\r\n    ] : options.defaultColor;\r\n}\r\n\r\nfunction getDefaultColor(options) {\r\n    return getOption(options, 'defaultColor', [0, 0, 0, 0]);\r\n}\r\nfunction getOption(options, name, defaultValue) {\r\n    return (options[name] === undefined ? defaultValue : options[name]);\r\n}\r\n\r\nvar MIN_SIZE = 10;\r\nvar MAX_SIZE = 100;\r\nfunction isSvg(filename) {\r\n    return filename.search(/\\.svg(\\?|$)/i) !== -1;\r\n}\r\nfunction getOriginalSize(resource) {\r\n    if (isInstanceOfHTMLImageElement(resource)) {\r\n        var width = resource.naturalWidth;\r\n        var height = resource.naturalHeight;\r\n        // For SVG images with only viewBox attribute\r\n        if (!resource.naturalWidth && isSvg(resource.src)) {\r\n            width = height = MAX_SIZE;\r\n        }\r\n        return {\r\n            width: width,\r\n            height: height,\r\n        };\r\n    }\r\n    if (isInstanceOfHTMLVideoElement(resource)) {\r\n        return {\r\n            width: resource.videoWidth,\r\n            height: resource.videoHeight\r\n        };\r\n    }\r\n    if (isInstanceOfVideoFrame(resource)) {\r\n        return {\r\n            width: resource.codedWidth,\r\n            height: resource.codedHeight,\r\n        };\r\n    }\r\n    return {\r\n        width: resource.width,\r\n        height: resource.height\r\n    };\r\n}\r\nfunction getSrc(resource) {\r\n    if (isInstanceOfHTMLCanvasElement(resource)) {\r\n        return 'canvas';\r\n    }\r\n    if (isInstanceOfOffscreenCanvas(resource)) {\r\n        return 'offscreencanvas';\r\n    }\r\n    if (isInstanceOfVideoFrame(resource)) {\r\n        return 'videoframe';\r\n    }\r\n    if (isInstanceOfImageBitmap(resource)) {\r\n        return 'imagebitmap';\r\n    }\r\n    return resource.src;\r\n}\r\nfunction isInstanceOfHTMLImageElement(resource) {\r\n    return typeof HTMLImageElement !== 'undefined' && resource instanceof HTMLImageElement;\r\n}\r\nvar hasOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';\r\nfunction isInstanceOfOffscreenCanvas(resource) {\r\n    return hasOffscreenCanvas && resource instanceof OffscreenCanvas;\r\n}\r\nfunction isInstanceOfHTMLVideoElement(resource) {\r\n    return typeof HTMLVideoElement !== 'undefined' && resource instanceof HTMLVideoElement;\r\n}\r\nfunction isInstanceOfVideoFrame(resource) {\r\n    return typeof VideoFrame !== 'undefined' && resource instanceof VideoFrame;\r\n}\r\nfunction isInstanceOfHTMLCanvasElement(resource) {\r\n    return typeof HTMLCanvasElement !== 'undefined' && resource instanceof HTMLCanvasElement;\r\n}\r\nfunction isInstanceOfImageBitmap(resource) {\r\n    return typeof ImageBitmap !== 'undefined' && resource instanceof ImageBitmap;\r\n}\r\nfunction prepareSizeAndPosition(originalSize, options) {\r\n    var srcLeft = getOption(options, 'left', 0);\r\n    var srcTop = getOption(options, 'top', 0);\r\n    var srcWidth = getOption(options, 'width', originalSize.width);\r\n    var srcHeight = getOption(options, 'height', originalSize.height);\r\n    var destWidth = srcWidth;\r\n    var destHeight = srcHeight;\r\n    if (options.mode === 'precision') {\r\n        return {\r\n            srcLeft: srcLeft,\r\n            srcTop: srcTop,\r\n            srcWidth: srcWidth,\r\n            srcHeight: srcHeight,\r\n            destWidth: destWidth,\r\n            destHeight: destHeight\r\n        };\r\n    }\r\n    var factor;\r\n    if (srcWidth > srcHeight) {\r\n        factor = srcWidth / srcHeight;\r\n        destWidth = MAX_SIZE;\r\n        destHeight = Math.round(destWidth / factor);\r\n    }\r\n    else {\r\n        factor = srcHeight / srcWidth;\r\n        destHeight = MAX_SIZE;\r\n        destWidth = Math.round(destHeight / factor);\r\n    }\r\n    if (destWidth > srcWidth || destHeight > srcHeight ||\r\n        destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\r\n        destWidth = srcWidth;\r\n        destHeight = srcHeight;\r\n    }\r\n    return {\r\n        srcLeft: srcLeft,\r\n        srcTop: srcTop,\r\n        srcWidth: srcWidth,\r\n        srcHeight: srcHeight,\r\n        destWidth: destWidth,\r\n        destHeight: destHeight\r\n    };\r\n}\r\nvar isWebWorkers = typeof window === 'undefined';\r\nfunction makeCanvas() {\r\n    if (isWebWorkers) {\r\n        return hasOffscreenCanvas ? new OffscreenCanvas(1, 1) : null;\r\n    }\r\n    return document.createElement('canvas');\r\n}\r\n\r\nvar ERROR_PREFIX = 'FastAverageColor: ';\r\nfunction getError(message) {\r\n    return Error(ERROR_PREFIX + message);\r\n}\r\nfunction outputError(error, silent) {\r\n    if (!silent) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nvar FastAverageColor = /** @class */ (function () {\r\n    function FastAverageColor() {\r\n        this.canvas = null;\r\n        this.ctx = null;\r\n    }\r\n    FastAverageColor.prototype.getColorAsync = function (resource, options) {\r\n        if (!resource) {\r\n            return Promise.reject(getError('call .getColorAsync() without resource'));\r\n        }\r\n        if (typeof resource === 'string') {\r\n            // Web workers\r\n            if (typeof Image === 'undefined') {\r\n                return Promise.reject(getError('resource as string is not supported in this environment'));\r\n            }\r\n            var img = new Image();\r\n            img.crossOrigin = options && options.crossOrigin || '';\r\n            img.src = resource;\r\n            return this.bindImageEvents(img, options);\r\n        }\r\n        else if (isInstanceOfHTMLImageElement(resource) && !resource.complete) {\r\n            return this.bindImageEvents(resource, options);\r\n        }\r\n        else {\r\n            var result = this.getColor(resource, options);\r\n            return result.error ? Promise.reject(result.error) : Promise.resolve(result);\r\n        }\r\n    };\r\n    /**\r\n     * Get the average color from images, videos and canvas.\r\n     */\r\n    FastAverageColor.prototype.getColor = function (resource, options) {\r\n        options = options || {};\r\n        var defaultColor = getDefaultColor(options);\r\n        if (!resource) {\r\n            var error = getError('call .getColor() without resource');\r\n            outputError(error, options.silent);\r\n            return this.prepareResult(defaultColor, error);\r\n        }\r\n        var originalSize = getOriginalSize(resource);\r\n        var size = prepareSizeAndPosition(originalSize, options);\r\n        if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\r\n            var error = getError(\"incorrect sizes for resource \\\"\".concat(getSrc(resource), \"\\\"\"));\r\n            outputError(error, options.silent);\r\n            return this.prepareResult(defaultColor, error);\r\n        }\r\n        if (!this.canvas) {\r\n            this.canvas = makeCanvas();\r\n            if (!this.canvas) {\r\n                var error = getError('OffscreenCanvas is not supported in this browser');\r\n                outputError(error, options.silent);\r\n                return this.prepareResult(defaultColor, error);\r\n            }\r\n        }\r\n        if (!this.ctx) {\r\n            this.ctx = this.canvas.getContext('2d', { willReadFrequently: true });\r\n            if (!this.ctx) {\r\n                var error = getError('Canvas Context 2D is not supported in this browser');\r\n                outputError(error, options.silent);\r\n                return this.prepareResult(defaultColor);\r\n            }\r\n            this.ctx.imageSmoothingEnabled = false;\r\n        }\r\n        this.canvas.width = size.destWidth;\r\n        this.canvas.height = size.destHeight;\r\n        try {\r\n            this.ctx.clearRect(0, 0, size.destWidth, size.destHeight);\r\n            this.ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\r\n            var bitmapData = this.ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\r\n            return this.prepareResult(this.getColorFromArray4(bitmapData, options));\r\n        }\r\n        catch (originalError) {\r\n            var error = getError(\"security error (CORS) for resource \".concat(getSrc(resource), \".\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image\"));\r\n            outputError(error, options.silent);\r\n            if (!options.silent) {\r\n                console.error(originalError);\r\n            }\r\n            return this.prepareResult(defaultColor, error);\r\n        }\r\n    };\r\n    /**\r\n     * Get the average color from a array when 1 pixel is 4 bytes.\r\n     */\r\n    FastAverageColor.prototype.getColorFromArray4 = function (arr, options) {\r\n        options = options || {};\r\n        var bytesPerPixel = 4;\r\n        var arrLength = arr.length;\r\n        var defaultColor = getDefaultColor(options);\r\n        if (arrLength < bytesPerPixel) {\r\n            return defaultColor;\r\n        }\r\n        var len = arrLength - arrLength % bytesPerPixel;\r\n        var step = (options.step || 1) * bytesPerPixel;\r\n        var algorithm;\r\n        switch (options.algorithm || 'sqrt') {\r\n            case 'simple':\r\n                algorithm = simpleAlgorithm;\r\n                break;\r\n            case 'sqrt':\r\n                algorithm = sqrtAlgorithm;\r\n                break;\r\n            case 'dominant':\r\n                algorithm = dominantAlgorithm;\r\n                break;\r\n            default:\r\n                throw getError(\"\".concat(options.algorithm, \" is unknown algorithm\"));\r\n        }\r\n        return algorithm(arr, len, {\r\n            defaultColor: defaultColor,\r\n            ignoredColor: prepareIgnoredColor(options.ignoredColor),\r\n            step: step,\r\n            dominantDivider: options.dominantDivider,\r\n        });\r\n    };\r\n    /**\r\n     * Get color data from value ([r, g, b, a]).\r\n     */\r\n    FastAverageColor.prototype.prepareResult = function (value, error) {\r\n        var rgb = value.slice(0, 3);\r\n        var rgba = [value[0], value[1], value[2], value[3] / 255];\r\n        var isDarkColor = isDark(value);\r\n        return {\r\n            value: [value[0], value[1], value[2], value[3]],\r\n            rgb: 'rgb(' + rgb.join(',') + ')',\r\n            rgba: 'rgba(' + rgba.join(',') + ')',\r\n            hex: arrayToHex(rgb),\r\n            hexa: arrayToHex(value),\r\n            isDark: isDarkColor,\r\n            isLight: !isDarkColor,\r\n            error: error,\r\n        };\r\n    };\r\n    /**\r\n     * Destroy the instance.\r\n     */\r\n    FastAverageColor.prototype.destroy = function () {\r\n        if (this.canvas) {\r\n            this.canvas.width = 1;\r\n            this.canvas.height = 1;\r\n            this.canvas = null;\r\n        }\r\n        this.ctx = null;\r\n    };\r\n    FastAverageColor.prototype.bindImageEvents = function (resource, options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var onload = function () {\r\n                unbindEvents();\r\n                var result = _this.getColor(resource, options);\r\n                if (result.error) {\r\n                    reject(result.error);\r\n                }\r\n                else {\r\n                    resolve(result);\r\n                }\r\n            };\r\n            var onerror = function () {\r\n                unbindEvents();\r\n                reject(getError(\"Error loading image \\\"\".concat(resource.src, \"\\\"\")));\r\n            };\r\n            var onabort = function () {\r\n                unbindEvents();\r\n                reject(getError(\"Image \\\"\".concat(resource.src, \"\\\" loading aborted\")));\r\n            };\r\n            var unbindEvents = function () {\r\n                resource.removeEventListener('load', onload);\r\n                resource.removeEventListener('error', onerror);\r\n                resource.removeEventListener('abort', onabort);\r\n            };\r\n            resource.addEventListener('load', onload);\r\n            resource.addEventListener('error', onerror);\r\n            resource.addEventListener('abort', onabort);\r\n        });\r\n    };\r\n    return FastAverageColor;\r\n}());\r\n\r\nexport { FastAverageColor };\r\n"],
  "mappings": "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",
  "names": ["FastAverageColor"]
}
