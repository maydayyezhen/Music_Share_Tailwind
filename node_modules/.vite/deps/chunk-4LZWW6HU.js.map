{
  "version": 3,
  "sources": ["../../@dicebear/core/lib/utils/license.js", "../../@dicebear/core/lib/utils/escape.js", "../../@dicebear/core/lib/utils/prng.js", "../../@dicebear/core/lib/utils/svg.js", "../../@dicebear/core/lib/schema.js", "../../@dicebear/core/lib/utils/options.js", "../../@dicebear/core/lib/utils/color.js", "../../@dicebear/core/lib/core.js"],
  "sourcesContent": ["import * as _ from './escape.js';\r\nexport function xml(style) {\r\n    var _a, _b, _c, _d, _e, _f, _g;\r\n    const title = (_a = style.meta) === null || _a === void 0 ? void 0 : _a.title;\r\n    const creator = (_b = style.meta) === null || _b === void 0 ? void 0 : _b.creator;\r\n    const source = (_c = style.meta) === null || _c === void 0 ? void 0 : _c.source;\r\n    const license = (_e = (_d = style.meta) === null || _d === void 0 ? void 0 : _d.license) === null || _e === void 0 ? void 0 : _e.url;\r\n    const rights = text(style);\r\n    if (!title && !creator && !source && !license && !rights) {\r\n        return '';\r\n    }\r\n    // https://nsteffel.github.io/dublin_core_generator/generator.html\r\n    return ('<metadata' +\r\n        ' xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"' +\r\n        ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"' +\r\n        ' xmlns:dc=\"http://purl.org/dc/elements/1.1/\"' +\r\n        ' xmlns:dcterms=\"http://purl.org/dc/terms/\">' +\r\n        '<rdf:RDF>' +\r\n        '<rdf:Description>' +\r\n        (title ? `<dc:title>${_.xml(title)}</dc:title>` : '') +\r\n        (creator ? `<dc:creator>${_.xml(creator)}</dc:creator>` : '') +\r\n        (source\r\n            ? `<dc:source xsi:type=\"dcterms:URI\">${_.xml((_g = (_f = style.meta) === null || _f === void 0 ? void 0 : _f.source) !== null && _g !== void 0 ? _g : '')}</dc:source>`\r\n            : '') +\r\n        (license\r\n            ? `<dcterms:license xsi:type=\"dcterms:URI\">${_.xml(license)}</dcterms:license>`\r\n            : '') +\r\n        (rights ? `<dc:rights>${_.xml(rights)}</dc:rights>` : '') +\r\n        '</rdf:Description>' +\r\n        '</rdf:RDF>' +\r\n        '</metadata>');\r\n}\r\nexport function text(style) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\r\n    let title = ((_a = style.meta) === null || _a === void 0 ? void 0 : _a.title) ? `„${(_b = style.meta) === null || _b === void 0 ? void 0 : _b.title}”` : 'Design';\r\n    let creator = `„${(_d = (_c = style.meta) === null || _c === void 0 ? void 0 : _c.creator) !== null && _d !== void 0 ? _d : 'Unknown'}”`;\r\n    if ((_e = style.meta) === null || _e === void 0 ? void 0 : _e.source) {\r\n        title += ` (${style.meta.source})`;\r\n    }\r\n    let result = '';\r\n    if (((_g = (_f = style.meta) === null || _f === void 0 ? void 0 : _f.license) === null || _g === void 0 ? void 0 : _g.name) !== 'MIT' &&\r\n        ((_h = style.meta) === null || _h === void 0 ? void 0 : _h.creator) !== 'DiceBear' &&\r\n        ((_j = style.meta) === null || _j === void 0 ? void 0 : _j.title)) {\r\n        result += 'Remix of ';\r\n    }\r\n    result += `${title} by ${creator}`;\r\n    if ((_l = (_k = style.meta) === null || _k === void 0 ? void 0 : _k.license) === null || _l === void 0 ? void 0 : _l.name) {\r\n        result += `, licensed under „${(_o = (_m = style.meta) === null || _m === void 0 ? void 0 : _m.license) === null || _o === void 0 ? void 0 : _o.name}”`;\r\n        if ((_q = (_p = style.meta) === null || _p === void 0 ? void 0 : _p.license) === null || _q === void 0 ? void 0 : _q.url) {\r\n            result += ` (${style.meta.license.url})`;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n", "export function xml(content) {\r\n    return content\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/'/g, '&apos;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n}\r\n", "const MIN = -2147483648;\r\nconst MAX = 2147483647;\r\nfunction xorshift(value) {\r\n    value ^= value << 13;\r\n    value ^= value >> 17;\r\n    value ^= value << 5;\r\n    return value;\r\n}\r\nfunction hashSeed(seed) {\r\n    let hash = 0;\r\n    for (let i = 0; i < seed.length; i++) {\r\n        hash = ((hash << 5) - hash + seed.charCodeAt(i)) | 0;\r\n        hash = xorshift(hash);\r\n    }\r\n    return hash;\r\n}\r\nexport function create(seed = '') {\r\n    // Ensure that seed is a string\r\n    seed = seed.toString();\r\n    let value = hashSeed(seed) || 1;\r\n    const next = () => (value = xorshift(value));\r\n    const integer = (min, max) => {\r\n        return Math.floor(((next() - MIN) / (MAX - MIN)) * (max + 1 - min) + min);\r\n    };\r\n    return {\r\n        seed,\r\n        next,\r\n        bool(likelihood = 50) {\r\n            return integer(1, 100) <= likelihood;\r\n        },\r\n        integer(min, max) {\r\n            return integer(min, max);\r\n        },\r\n        pick(arr, fallback) {\r\n            var _a;\r\n            if (arr.length === 0) {\r\n                next();\r\n                return fallback;\r\n            }\r\n            return (_a = arr[integer(0, arr.length - 1)]) !== null && _a !== void 0 ? _a : fallback;\r\n        },\r\n        shuffle(arr) {\r\n            // Each method call should call the `next` function only once.\r\n            // Therefore, we use a separate instance of the PRNG here.\r\n            const internalPrng = create(next().toString());\r\n            // Fisher-Yates shuffle algorithm - We do not use the Array.sort method\r\n            // because it is not stable and produces different results when used in\r\n            // different browsers. See: https://github.com/dicebear/dicebear/issues/394\r\n            const workingArray = [...arr];\r\n            for (let i = workingArray.length - 1; i > 0; i--) {\r\n                const j = internalPrng.integer(0, i);\r\n                [workingArray[i], workingArray[j]] = [workingArray[j], workingArray[i]];\r\n            }\r\n            return workingArray;\r\n        },\r\n        string(length, characters = 'abcdefghijklmnopqrstuvwxyz1234567890') {\r\n            // Each method call should call the `next` function only once.\r\n            // Therefore, we use a separate instance of the PRNG here.\r\n            const internalPrng = create(next().toString());\r\n            let str = '';\r\n            for (let i = 0; i < length; i++) {\r\n                str += characters[internalPrng.integer(0, characters.length - 1)];\r\n            }\r\n            return str;\r\n        },\r\n    };\r\n}\r\n", "import * as escape from './escape.js';\r\nimport { create as createPrng } from './prng.js';\r\nexport function getViewBox(result) {\r\n    let viewBox = result.attributes['viewBox'].split(' ');\r\n    let x = parseInt(viewBox[0]);\r\n    let y = parseInt(viewBox[1]);\r\n    let width = parseInt(viewBox[2]);\r\n    let height = parseInt(viewBox[3]);\r\n    return {\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n    };\r\n}\r\nexport function addBackground(result, primaryColor, secondaryColor, type, rotation) {\r\n    let { width, height, x, y } = getViewBox(result);\r\n    const solidBackground = `<rect fill=\"${primaryColor}\" width=\"${width}\" height=\"${height}\" x=\"${x}\" y=\"${y}\" />`;\r\n    switch (type) {\r\n        case 'solid':\r\n            return solidBackground + result.body;\r\n        case 'gradientLinear':\r\n            return (`<rect fill=\"url(#backgroundLinear)\" width=\"${width}\" height=\"${height}\" x=\"${x}\" y=\"${y}\" />` +\r\n                `<defs>` +\r\n                `<linearGradient id=\"backgroundLinear\" gradientTransform=\"rotate(${rotation} 0.5 0.5)\">` +\r\n                `<stop stop-color=\"${primaryColor}\"/>` +\r\n                `<stop offset=\"1\" stop-color=\"${secondaryColor}\"/>` +\r\n                `</linearGradient>` +\r\n                `</defs>` +\r\n                result.body);\r\n    }\r\n}\r\nexport function addScale(result, scale) {\r\n    let { width, height, x, y } = getViewBox(result);\r\n    let percent = scale ? (scale - 100) / 100 : 0;\r\n    let translateX = (width / 2 + x) * percent * -1;\r\n    let translateY = (height / 2 + y) * percent * -1;\r\n    return `<g transform=\"translate(${translateX} ${translateY}) scale(${scale / 100})\">${result.body}</g>`;\r\n}\r\nexport function addTranslate(result, x, y) {\r\n    let viewBox = getViewBox(result);\r\n    let translateX = (viewBox.width + viewBox.x * 2) * ((x !== null && x !== void 0 ? x : 0) / 100);\r\n    let translateY = (viewBox.height + viewBox.y * 2) * ((y !== null && y !== void 0 ? y : 0) / 100);\r\n    return `<g transform=\"translate(${translateX} ${translateY})\">${result.body}</g>`;\r\n}\r\nexport function addRotate(result, rotate) {\r\n    let { width, height, x, y } = getViewBox(result);\r\n    return `<g transform=\"rotate(${rotate}, ${width / 2 + x}, ${height / 2 + y})\">${result.body}</g>`;\r\n}\r\nexport function addFlip(result) {\r\n    let { width, x } = getViewBox(result);\r\n    return `<g transform=\"scale(-1 1) translate(${width * -1 - x * 2} 0)\">${result.body}</g>`;\r\n}\r\nexport function addViewboxMask(result, radius) {\r\n    let { width, height, x, y } = getViewBox(result);\r\n    let rx = radius ? (width * radius) / 100 : 0;\r\n    let ry = radius ? (height * radius) / 100 : 0;\r\n    return (`<mask id=\"viewboxMask\">` +\r\n        `<rect width=\"${width}\" height=\"${height}\" rx=\"${rx}\" ry=\"${ry}\" x=\"${x}\" y=\"${y}\" fill=\"#fff\" />` +\r\n        `</mask>` +\r\n        `<g mask=\"url(#viewboxMask)\">${result.body}</g>`);\r\n}\r\nexport function createAttrString(result) {\r\n    const attributes = {\r\n        xmlns: 'http://www.w3.org/2000/svg',\r\n        ...result.attributes,\r\n    };\r\n    return Object.keys(attributes)\r\n        .map((attr) => `${escape.xml(attr)}=\"${escape.xml(attributes[attr])}\"`)\r\n        .join(' ');\r\n}\r\nexport function randomizeIds(result) {\r\n    const prng = createPrng(Math.random().toString());\r\n    const ids = {};\r\n    return result.body.replace(/(id=\"|url\\(#)([a-z0-9-_]+)([\")])/gi, (match, m1, m2, m3) => {\r\n        ids[m2] = ids[m2] || prng.string(8);\r\n        return `${m1}${ids[m2]}${m3}`;\r\n    });\r\n}\r\n", "export const schema = {\r\n    type: 'object',\r\n    $schema: 'http://json-schema.org/draft-07/schema#',\r\n    properties: {\r\n        seed: {\r\n            type: 'string',\r\n        },\r\n        flip: {\r\n            type: 'boolean',\r\n            default: false,\r\n        },\r\n        rotate: {\r\n            type: 'integer',\r\n            minimum: 0,\r\n            maximum: 360,\r\n            default: 0,\r\n        },\r\n        scale: {\r\n            type: 'integer',\r\n            minimum: 0,\r\n            maximum: 200,\r\n            default: 100,\r\n        },\r\n        radius: {\r\n            type: 'integer',\r\n            minimum: 0,\r\n            maximum: 50,\r\n            default: 0,\r\n        },\r\n        size: {\r\n            type: 'integer',\r\n            minimum: 1,\r\n        },\r\n        backgroundColor: {\r\n            type: 'array',\r\n            items: {\r\n                type: 'string',\r\n                pattern: '^(transparent|[a-fA-F0-9]{6})$',\r\n            },\r\n        },\r\n        backgroundType: {\r\n            type: 'array',\r\n            items: {\r\n                type: 'string',\r\n                enum: ['solid', 'gradientLinear'],\r\n            },\r\n            default: ['solid'],\r\n        },\r\n        backgroundRotation: {\r\n            type: 'array',\r\n            items: {\r\n                type: 'integer',\r\n                minimum: -360,\r\n                maximum: 360,\r\n            },\r\n            default: [\r\n                0, 360,\r\n            ],\r\n        },\r\n        translateX: {\r\n            type: 'integer',\r\n            minimum: -100,\r\n            maximum: 100,\r\n            default: 0,\r\n        },\r\n        translateY: {\r\n            type: 'integer',\r\n            minimum: -100,\r\n            maximum: 100,\r\n            default: 0,\r\n        },\r\n        clip: {\r\n            type: 'boolean',\r\n            default: true,\r\n        },\r\n        randomizeIds: {\r\n            type: 'boolean',\r\n            default: false,\r\n        },\r\n    },\r\n};\r\n", "import { schema } from '../schema.js';\r\nexport function defaults(schema) {\r\n    var _a;\r\n    let result = {};\r\n    let props = (_a = schema.properties) !== null && _a !== void 0 ? _a : {};\r\n    Object.keys(props).forEach((key) => {\r\n        let val = props[key];\r\n        if (typeof val === 'object' && undefined !== val.default) {\r\n            if (Array.isArray(val.default)) {\r\n                result[key] = [...val.default];\r\n            }\r\n            else if (typeof val.default === 'object') {\r\n                result[key] = { ...val.default };\r\n            }\r\n            else {\r\n                result[key] = val.default;\r\n            }\r\n        }\r\n    });\r\n    return result;\r\n}\r\nexport function merge(style, options) {\r\n    var _a;\r\n    let result = {\r\n        ...defaults(schema),\r\n        ...defaults((_a = style.schema) !== null && _a !== void 0 ? _a : {}),\r\n        ...options,\r\n    };\r\n    // Return a complete copy because the styles could partially customize the\r\n    // options and thus modify nested objects and arrays.\r\n    return JSON.parse(JSON.stringify(result));\r\n}\r\n", "export function convertColor(color) {\r\n    return 'transparent' === color ? color : `#${color}`;\r\n}\r\nexport function getBackgroundColors(prng, backgroundColor, backgroundType) {\r\n    var _a;\r\n    let shuffledBackgroundColors = prng.shuffle(backgroundColor);\r\n    if (shuffledBackgroundColors.length <= 1) {\r\n        // If no background colour or only one background colour has been selected,\r\n        // the random sorting logic can be omitted.\r\n        shuffledBackgroundColors = backgroundColor;\r\n        // A function call should in any case make an identical number of calls to the PRNG.\r\n        prng.next();\r\n    }\r\n    else if (backgroundColor.length == 2 && backgroundType == 'gradientLinear') {\r\n        // If the background is to be a colour gradient and exactly two background\r\n        // colours have been specified, do not sort them randomly. In this case, we\r\n        // assume that the order of the background colours was chosen on purpose.\r\n        shuffledBackgroundColors = backgroundColor;\r\n        // A function call should in any case make an identical number of calls to the PRNG.\r\n        prng.next();\r\n    }\r\n    else {\r\n        shuffledBackgroundColors = prng.shuffle(backgroundColor);\r\n    }\r\n    if (shuffledBackgroundColors.length === 0) {\r\n        shuffledBackgroundColors = ['transparent'];\r\n    }\r\n    const primary = shuffledBackgroundColors[0];\r\n    const secondary = (_a = shuffledBackgroundColors[1]) !== null && _a !== void 0 ? _a : shuffledBackgroundColors[0];\r\n    return {\r\n        primary: convertColor(primary),\r\n        secondary: convertColor(secondary),\r\n    };\r\n}\r\n", "import * as svgUtils from './utils/svg.js';\r\nimport { merge as mergeOptions } from './utils/options.js';\r\nimport { create as createPrng } from './utils/prng.js';\r\nimport * as license from './utils/license.js';\r\nimport { getBackgroundColors } from './utils/color.js';\r\nexport function createAvatar(style, options = {}) {\r\n    var _a, _b, _c, _d, _e;\r\n    options = mergeOptions(style, options);\r\n    const prng = createPrng(options.seed);\r\n    const result = style.create({ prng: prng, options });\r\n    const backgroundType = prng.pick((_a = options.backgroundType) !== null && _a !== void 0 ? _a : [], 'solid');\r\n    const { primary: primaryBackgroundColor, secondary: secondaryBackgroundColor, } = getBackgroundColors(prng, (_b = options.backgroundColor) !== null && _b !== void 0 ? _b : [], backgroundType);\r\n    const backgroundRotation = prng.integer(((_c = options.backgroundRotation) === null || _c === void 0 ? void 0 : _c.length)\r\n        ? Math.min(...options.backgroundRotation)\r\n        : 0, ((_d = options.backgroundRotation) === null || _d === void 0 ? void 0 : _d.length)\r\n        ? Math.max(...options.backgroundRotation)\r\n        : 0);\r\n    if (options.size) {\r\n        result.attributes.width = options.size.toString();\r\n        result.attributes.height = options.size.toString();\r\n    }\r\n    if (options.scale !== undefined && options.scale !== 100) {\r\n        result.body = svgUtils.addScale(result, options.scale);\r\n    }\r\n    if (options.flip) {\r\n        result.body = svgUtils.addFlip(result);\r\n    }\r\n    if (options.rotate) {\r\n        result.body = svgUtils.addRotate(result, options.rotate);\r\n    }\r\n    if (options.translateX || options.translateY) {\r\n        result.body = svgUtils.addTranslate(result, options.translateX, options.translateY);\r\n    }\r\n    if (primaryBackgroundColor !== 'transparent' &&\r\n        secondaryBackgroundColor !== 'transparent') {\r\n        result.body = svgUtils.addBackground(result, primaryBackgroundColor, secondaryBackgroundColor, backgroundType, backgroundRotation);\r\n    }\r\n    if (options.radius || options.clip) {\r\n        result.body = svgUtils.addViewboxMask(result, (_e = options.radius) !== null && _e !== void 0 ? _e : 0);\r\n    }\r\n    if (options.randomizeIds) {\r\n        // Reduces the occurrence of ID collisions when rendering multiple avatars on one HTML page.\r\n        result.body = svgUtils.randomizeIds(result);\r\n    }\r\n    const attributes = svgUtils.createAttrString(result);\r\n    const metadata = license.xml(style);\r\n    const svg = `<svg ${attributes}>${metadata}${result.body}</svg>`;\r\n    return {\r\n        toString: () => svg,\r\n        toJson: () => {\r\n            var _a;\r\n            return ({\r\n                svg: svg,\r\n                extra: {\r\n                    primaryBackgroundColor,\r\n                    secondaryBackgroundColor,\r\n                    backgroundType,\r\n                    backgroundRotation,\r\n                    ...(_a = result.extra) === null || _a === void 0 ? void 0 : _a.call(result),\r\n                },\r\n            });\r\n        },\r\n        toDataUri: () => {\r\n            return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;\r\n        },\r\n    };\r\n}\r\n"],
  "mappings": "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",
  "names": ["xml", "xml", "schema", "xml", "_a"]
}
